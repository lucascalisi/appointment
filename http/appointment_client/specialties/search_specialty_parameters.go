// Code generated by go-swagger; DO NOT EDIT.

package specialties

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSearchSpecialtyParams creates a new SearchSpecialtyParams object
// with the default values initialized.
func NewSearchSpecialtyParams() *SearchSpecialtyParams {
	var (
		categoryDefault    = string("")
		subCategoryDefault = string("")
	)
	return &SearchSpecialtyParams{
		Category:    &categoryDefault,
		SubCategory: &subCategoryDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewSearchSpecialtyParamsWithTimeout creates a new SearchSpecialtyParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSearchSpecialtyParamsWithTimeout(timeout time.Duration) *SearchSpecialtyParams {
	var (
		categoryDefault    = string("")
		subCategoryDefault = string("")
	)
	return &SearchSpecialtyParams{
		Category:    &categoryDefault,
		SubCategory: &subCategoryDefault,

		timeout: timeout,
	}
}

// NewSearchSpecialtyParamsWithContext creates a new SearchSpecialtyParams object
// with the default values initialized, and the ability to set a context for a request
func NewSearchSpecialtyParamsWithContext(ctx context.Context) *SearchSpecialtyParams {
	var (
		categoryDefault    = string("")
		subCategoryDefault = string("")
	)
	return &SearchSpecialtyParams{
		Category:    &categoryDefault,
		SubCategory: &subCategoryDefault,

		Context: ctx,
	}
}

// NewSearchSpecialtyParamsWithHTTPClient creates a new SearchSpecialtyParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSearchSpecialtyParamsWithHTTPClient(client *http.Client) *SearchSpecialtyParams {
	var (
		categoryDefault    = string("")
		subCategoryDefault = string("")
	)
	return &SearchSpecialtyParams{
		Category:    &categoryDefault,
		SubCategory: &subCategoryDefault,
		HTTPClient:  client,
	}
}

/*SearchSpecialtyParams contains all the parameters to send to the API endpoint
for the search specialty operation typically these are written to a http.Request
*/
type SearchSpecialtyParams struct {

	/*Category
	  main category

	*/
	Category *string
	/*SubCategory
	  secundary category

	*/
	SubCategory *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the search specialty params
func (o *SearchSpecialtyParams) WithTimeout(timeout time.Duration) *SearchSpecialtyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search specialty params
func (o *SearchSpecialtyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search specialty params
func (o *SearchSpecialtyParams) WithContext(ctx context.Context) *SearchSpecialtyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search specialty params
func (o *SearchSpecialtyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search specialty params
func (o *SearchSpecialtyParams) WithHTTPClient(client *http.Client) *SearchSpecialtyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search specialty params
func (o *SearchSpecialtyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCategory adds the category to the search specialty params
func (o *SearchSpecialtyParams) WithCategory(category *string) *SearchSpecialtyParams {
	o.SetCategory(category)
	return o
}

// SetCategory adds the category to the search specialty params
func (o *SearchSpecialtyParams) SetCategory(category *string) {
	o.Category = category
}

// WithSubCategory adds the subCategory to the search specialty params
func (o *SearchSpecialtyParams) WithSubCategory(subCategory *string) *SearchSpecialtyParams {
	o.SetSubCategory(subCategory)
	return o
}

// SetSubCategory adds the subCategory to the search specialty params
func (o *SearchSpecialtyParams) SetSubCategory(subCategory *string) {
	o.SubCategory = subCategory
}

// WriteToRequest writes these params to a swagger request
func (o *SearchSpecialtyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Category != nil {

		// query param category
		var qrCategory string
		if o.Category != nil {
			qrCategory = *o.Category
		}
		qCategory := qrCategory
		if qCategory != "" {
			if err := r.SetQueryParam("category", qCategory); err != nil {
				return err
			}
		}

	}

	if o.SubCategory != nil {

		// query param subCategory
		var qrSubCategory string
		if o.SubCategory != nil {
			qrSubCategory = *o.SubCategory
		}
		qSubCategory := qrSubCategory
		if qSubCategory != "" {
			if err := r.SetQueryParam("subCategory", qSubCategory); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
