// Code generated by go-swagger; DO NOT EDIT.

package specialties

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/appointment/http/models"
)

// SearchSpecialtyReader is a Reader for the SearchSpecialty structure.
type SearchSpecialtyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchSpecialtyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSearchSpecialtyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 500:
		result := NewSearchSpecialtyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSearchSpecialtyOK creates a SearchSpecialtyOK with default headers values
func NewSearchSpecialtyOK() *SearchSpecialtyOK {
	return &SearchSpecialtyOK{}
}

/*SearchSpecialtyOK handles this case with default header values.

result search specialties
*/
type SearchSpecialtyOK struct {
	Payload []*models.Specialty
}

func (o *SearchSpecialtyOK) Error() string {
	return fmt.Sprintf("[GET /v1/specialties][%d] searchSpecialtyOK  %+v", 200, o.Payload)
}

func (o *SearchSpecialtyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchSpecialtyInternalServerError creates a SearchSpecialtyInternalServerError with default headers values
func NewSearchSpecialtyInternalServerError() *SearchSpecialtyInternalServerError {
	return &SearchSpecialtyInternalServerError{}
}

/*SearchSpecialtyInternalServerError handles this case with default header values.

internal server error
*/
type SearchSpecialtyInternalServerError struct {
	Payload *models.Error
}

func (o *SearchSpecialtyInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/specialties][%d] searchSpecialtyInternalServerError  %+v", 500, o.Payload)
}

func (o *SearchSpecialtyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
