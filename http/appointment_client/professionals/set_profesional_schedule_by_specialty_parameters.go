// Code generated by go-swagger; DO NOT EDIT.

package professionals

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/appointment/http/models"
)

// NewSetProfesionalScheduleBySpecialtyParams creates a new SetProfesionalScheduleBySpecialtyParams object
// with the default values initialized.
func NewSetProfesionalScheduleBySpecialtyParams() *SetProfesionalScheduleBySpecialtyParams {
	var ()
	return &SetProfesionalScheduleBySpecialtyParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSetProfesionalScheduleBySpecialtyParamsWithTimeout creates a new SetProfesionalScheduleBySpecialtyParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSetProfesionalScheduleBySpecialtyParamsWithTimeout(timeout time.Duration) *SetProfesionalScheduleBySpecialtyParams {
	var ()
	return &SetProfesionalScheduleBySpecialtyParams{

		timeout: timeout,
	}
}

// NewSetProfesionalScheduleBySpecialtyParamsWithContext creates a new SetProfesionalScheduleBySpecialtyParams object
// with the default values initialized, and the ability to set a context for a request
func NewSetProfesionalScheduleBySpecialtyParamsWithContext(ctx context.Context) *SetProfesionalScheduleBySpecialtyParams {
	var ()
	return &SetProfesionalScheduleBySpecialtyParams{

		Context: ctx,
	}
}

// NewSetProfesionalScheduleBySpecialtyParamsWithHTTPClient creates a new SetProfesionalScheduleBySpecialtyParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSetProfesionalScheduleBySpecialtyParamsWithHTTPClient(client *http.Client) *SetProfesionalScheduleBySpecialtyParams {
	var ()
	return &SetProfesionalScheduleBySpecialtyParams{
		HTTPClient: client,
	}
}

/*SetProfesionalScheduleBySpecialtyParams contains all the parameters to send to the API endpoint
for the set profesional schedule by specialty operation typically these are written to a http.Request
*/
type SetProfesionalScheduleBySpecialtyParams struct {

	/*ID
	  id professional

	*/
	ID int64
	/*IDSpecialty
	  id specialty

	*/
	IDSpecialty int64
	/*Schedule*/
	Schedule *models.Schedule

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the set profesional schedule by specialty params
func (o *SetProfesionalScheduleBySpecialtyParams) WithTimeout(timeout time.Duration) *SetProfesionalScheduleBySpecialtyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set profesional schedule by specialty params
func (o *SetProfesionalScheduleBySpecialtyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set profesional schedule by specialty params
func (o *SetProfesionalScheduleBySpecialtyParams) WithContext(ctx context.Context) *SetProfesionalScheduleBySpecialtyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set profesional schedule by specialty params
func (o *SetProfesionalScheduleBySpecialtyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set profesional schedule by specialty params
func (o *SetProfesionalScheduleBySpecialtyParams) WithHTTPClient(client *http.Client) *SetProfesionalScheduleBySpecialtyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set profesional schedule by specialty params
func (o *SetProfesionalScheduleBySpecialtyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the set profesional schedule by specialty params
func (o *SetProfesionalScheduleBySpecialtyParams) WithID(id int64) *SetProfesionalScheduleBySpecialtyParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the set profesional schedule by specialty params
func (o *SetProfesionalScheduleBySpecialtyParams) SetID(id int64) {
	o.ID = id
}

// WithIDSpecialty adds the iDSpecialty to the set profesional schedule by specialty params
func (o *SetProfesionalScheduleBySpecialtyParams) WithIDSpecialty(iDSpecialty int64) *SetProfesionalScheduleBySpecialtyParams {
	o.SetIDSpecialty(iDSpecialty)
	return o
}

// SetIDSpecialty adds the idSpecialty to the set profesional schedule by specialty params
func (o *SetProfesionalScheduleBySpecialtyParams) SetIDSpecialty(iDSpecialty int64) {
	o.IDSpecialty = iDSpecialty
}

// WithSchedule adds the schedule to the set profesional schedule by specialty params
func (o *SetProfesionalScheduleBySpecialtyParams) WithSchedule(schedule *models.Schedule) *SetProfesionalScheduleBySpecialtyParams {
	o.SetSchedule(schedule)
	return o
}

// SetSchedule adds the schedule to the set profesional schedule by specialty params
func (o *SetProfesionalScheduleBySpecialtyParams) SetSchedule(schedule *models.Schedule) {
	o.Schedule = schedule
}

// WriteToRequest writes these params to a swagger request
func (o *SetProfesionalScheduleBySpecialtyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	// path param idSpecialty
	if err := r.SetPathParam("idSpecialty", swag.FormatInt64(o.IDSpecialty)); err != nil {
		return err
	}

	if o.Schedule != nil {
		if err := r.SetBodyParam(o.Schedule); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
