// Code generated by go-swagger; DO NOT EDIT.

package professionals

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAppointmentsByprofessionalParams creates a new GetAppointmentsByprofessionalParams object
// with the default values initialized.
func NewGetAppointmentsByprofessionalParams() *GetAppointmentsByprofessionalParams {
	var (
		finishDateDefault  = strfmt.DateTime("2040-01-01T00:00:00Z")
		idspecialtyDefault = int64(0)
		startDateDefault   = strfmt.DateTime("2000-01-01T00:00:00Z")
		statusDefault      = []interface{}{"confirmed", "pending"}
	)
	return &GetAppointmentsByprofessionalParams{
		FinishDate:  &finishDateDefault,
		Idspecialty: &idspecialtyDefault,
		StartDate:   &startDateDefault,
		Status:      statusDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAppointmentsByprofessionalParamsWithTimeout creates a new GetAppointmentsByprofessionalParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAppointmentsByprofessionalParamsWithTimeout(timeout time.Duration) *GetAppointmentsByprofessionalParams {
	var (
		finishDateDefault  = strfmt.DateTime("2040-01-01T00:00:00Z")
		idspecialtyDefault = int64(0)
		startDateDefault   = strfmt.DateTime("2000-01-01T00:00:00Z")
		statusDefault      = []interface{}{"confirmed", "pending"}
	)
	return &GetAppointmentsByprofessionalParams{
		FinishDate:  &finishDateDefault,
		Idspecialty: &idspecialtyDefault,
		StartDate:   &startDateDefault,
		Status:      statusDefault,

		timeout: timeout,
	}
}

// NewGetAppointmentsByprofessionalParamsWithContext creates a new GetAppointmentsByprofessionalParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAppointmentsByprofessionalParamsWithContext(ctx context.Context) *GetAppointmentsByprofessionalParams {
	var (
		finishDateDefault  = strfmt.DateTime("2040-01-01T00:00:00Z")
		idspecialtyDefault = int64(0)
		startDateDefault   = strfmt.DateTime("2000-01-01T00:00:00Z")
		statusDefault      = []interface{}{"confirmed", "pending"}
	)
	return &GetAppointmentsByprofessionalParams{
		FinishDate:  &finishDateDefault,
		Idspecialty: &idspecialtyDefault,
		StartDate:   &startDateDefault,
		Status:      statusDefault,

		Context: ctx,
	}
}

// NewGetAppointmentsByprofessionalParamsWithHTTPClient creates a new GetAppointmentsByprofessionalParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAppointmentsByprofessionalParamsWithHTTPClient(client *http.Client) *GetAppointmentsByprofessionalParams {
	var (
		finishDateDefault  = strfmt.DateTime("2040-01-01T00:00:00Z")
		idspecialtyDefault = int64(0)
		startDateDefault   = strfmt.DateTime("2000-01-01T00:00:00Z")
		statusDefault      = []interface{}{"confirmed", "pending"}
	)
	return &GetAppointmentsByprofessionalParams{
		FinishDate:  &finishDateDefault,
		Idspecialty: &idspecialtyDefault,
		StartDate:   &startDateDefault,
		Status:      statusDefault,
		HTTPClient:  client,
	}
}

/*GetAppointmentsByprofessionalParams contains all the parameters to send to the API endpoint
for the get appointments byprofessional operation typically these are written to a http.Request
*/
type GetAppointmentsByprofessionalParams struct {

	/*FinishDate
	  finish date for appointment

	*/
	FinishDate *strfmt.DateTime
	/*ID
	  id professional

	*/
	ID int64
	/*Idspecialty
	  id for specialty

	*/
	Idspecialty *int64
	/*StartDate
	  start date for appointment

	*/
	StartDate *strfmt.DateTime
	/*Status
	  appointment status

	*/
	Status []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get appointments byprofessional params
func (o *GetAppointmentsByprofessionalParams) WithTimeout(timeout time.Duration) *GetAppointmentsByprofessionalParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get appointments byprofessional params
func (o *GetAppointmentsByprofessionalParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get appointments byprofessional params
func (o *GetAppointmentsByprofessionalParams) WithContext(ctx context.Context) *GetAppointmentsByprofessionalParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get appointments byprofessional params
func (o *GetAppointmentsByprofessionalParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get appointments byprofessional params
func (o *GetAppointmentsByprofessionalParams) WithHTTPClient(client *http.Client) *GetAppointmentsByprofessionalParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get appointments byprofessional params
func (o *GetAppointmentsByprofessionalParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFinishDate adds the finishDate to the get appointments byprofessional params
func (o *GetAppointmentsByprofessionalParams) WithFinishDate(finishDate *strfmt.DateTime) *GetAppointmentsByprofessionalParams {
	o.SetFinishDate(finishDate)
	return o
}

// SetFinishDate adds the finishDate to the get appointments byprofessional params
func (o *GetAppointmentsByprofessionalParams) SetFinishDate(finishDate *strfmt.DateTime) {
	o.FinishDate = finishDate
}

// WithID adds the id to the get appointments byprofessional params
func (o *GetAppointmentsByprofessionalParams) WithID(id int64) *GetAppointmentsByprofessionalParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get appointments byprofessional params
func (o *GetAppointmentsByprofessionalParams) SetID(id int64) {
	o.ID = id
}

// WithIdspecialty adds the idspecialty to the get appointments byprofessional params
func (o *GetAppointmentsByprofessionalParams) WithIdspecialty(idspecialty *int64) *GetAppointmentsByprofessionalParams {
	o.SetIdspecialty(idspecialty)
	return o
}

// SetIdspecialty adds the idspecialty to the get appointments byprofessional params
func (o *GetAppointmentsByprofessionalParams) SetIdspecialty(idspecialty *int64) {
	o.Idspecialty = idspecialty
}

// WithStartDate adds the startDate to the get appointments byprofessional params
func (o *GetAppointmentsByprofessionalParams) WithStartDate(startDate *strfmt.DateTime) *GetAppointmentsByprofessionalParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the get appointments byprofessional params
func (o *GetAppointmentsByprofessionalParams) SetStartDate(startDate *strfmt.DateTime) {
	o.StartDate = startDate
}

// WithStatus adds the status to the get appointments byprofessional params
func (o *GetAppointmentsByprofessionalParams) WithStatus(status []string) *GetAppointmentsByprofessionalParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get appointments byprofessional params
func (o *GetAppointmentsByprofessionalParams) SetStatus(status []string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *GetAppointmentsByprofessionalParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FinishDate != nil {

		// query param finishDate
		var qrFinishDate strfmt.DateTime
		if o.FinishDate != nil {
			qrFinishDate = *o.FinishDate
		}
		qFinishDate := qrFinishDate.String()
		if qFinishDate != "" {
			if err := r.SetQueryParam("finishDate", qFinishDate); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.Idspecialty != nil {

		// query param idspecialty
		var qrIdspecialty int64
		if o.Idspecialty != nil {
			qrIdspecialty = *o.Idspecialty
		}
		qIdspecialty := swag.FormatInt64(qrIdspecialty)
		if qIdspecialty != "" {
			if err := r.SetQueryParam("idspecialty", qIdspecialty); err != nil {
				return err
			}
		}

	}

	if o.StartDate != nil {

		// query param startDate
		var qrStartDate strfmt.DateTime
		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate.String()
		if qStartDate != "" {
			if err := r.SetQueryParam("startDate", qStartDate); err != nil {
				return err
			}
		}

	}

	valuesStatus := o.Status

	joinedStatus := swag.JoinByFormat(valuesStatus, "")
	// query array param status
	if err := r.SetQueryParam("status", joinedStatus...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
