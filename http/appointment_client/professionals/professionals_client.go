// Code generated by go-swagger; DO NOT EDIT.

package professionals

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new professionals API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for professionals API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CancelAppointmentProfessional cancel appointment professional API
*/
func (a *Client) CancelAppointmentProfessional(params *CancelAppointmentProfessionalParams) (*CancelAppointmentProfessionalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelAppointmentProfessionalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancelAppointmentProfessional",
		Method:             "POST",
		PathPattern:        "/v1/professionals/{id}/appointments/{idappointment}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CancelAppointmentProfessionalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CancelAppointmentProfessionalOK), nil

}

/*
GetAppointmentByProfessionalAppointmentID get appointment by professional appointment Id API
*/
func (a *Client) GetAppointmentByProfessionalAppointmentID(params *GetAppointmentByProfessionalAppointmentIDParams) (*GetAppointmentByProfessionalAppointmentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppointmentByProfessionalAppointmentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAppointmentByProfessionalAppointmentId",
		Method:             "GET",
		PathPattern:        "/v1/professionals/{id}/appointments/{idappointment}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAppointmentByProfessionalAppointmentIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAppointmentByProfessionalAppointmentIDOK), nil

}

/*
GetAppointmentsByprofessional get appointments byprofessional API
*/
func (a *Client) GetAppointmentsByprofessional(params *GetAppointmentsByprofessionalParams) (*GetAppointmentsByprofessionalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppointmentsByprofessionalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAppointmentsByprofessional",
		Method:             "GET",
		PathPattern:        "/v1/professionals/{id}/appointments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAppointmentsByprofessionalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAppointmentsByprofessionalOK), nil

}

/*
GetProfesionalScheduleBySpecialty get profesional schedule by specialty API
*/
func (a *Client) GetProfesionalScheduleBySpecialty(params *GetProfesionalScheduleBySpecialtyParams) (*GetProfesionalScheduleBySpecialtyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProfesionalScheduleBySpecialtyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProfesionalScheduleBySpecialty",
		Method:             "GET",
		PathPattern:        "/v1/professionals/{id}/specialties/{idSpecialty}/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProfesionalScheduleBySpecialtyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProfesionalScheduleBySpecialtyOK), nil

}

/*
GetProfessionalbyID get professionalby Id API
*/
func (a *Client) GetProfessionalbyID(params *GetProfessionalbyIDParams) (*GetProfessionalbyIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProfessionalbyIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProfessionalbyId",
		Method:             "GET",
		PathPattern:        "/v1/professionals/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProfessionalbyIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProfessionalbyIDOK), nil

}

/*
GetSpecialtiesByProfessional get specialties by professional API
*/
func (a *Client) GetSpecialtiesByProfessional(params *GetSpecialtiesByProfessionalParams) (*GetSpecialtiesByProfessionalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSpecialtiesByProfessionalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSpecialtiesByProfessional",
		Method:             "GET",
		PathPattern:        "/v1/professionals/{id}/specialties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSpecialtiesByProfessionalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSpecialtiesByProfessionalOK), nil

}

/*
SetProfesionalScheduleBySpecialty set profesional schedule by specialty API
*/
func (a *Client) SetProfesionalScheduleBySpecialty(params *SetProfesionalScheduleBySpecialtyParams) (*SetProfesionalScheduleBySpecialtyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetProfesionalScheduleBySpecialtyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setProfesionalScheduleBySpecialty",
		Method:             "POST",
		PathPattern:        "/v1/professionals/{id}/specialties/{idSpecialty}/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetProfesionalScheduleBySpecialtyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetProfesionalScheduleBySpecialtyOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
