// Code generated by go-swagger; DO NOT EDIT.

package queue

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/appointment/http/models"
)

// AddPatientToQueueOKCode is the HTTP code returned for type AddPatientToQueueOK
const AddPatientToQueueOKCode int = 200

/*AddPatientToQueueOK added successful

swagger:response addPatientToQueueOK
*/
type AddPatientToQueueOK struct {
}

// NewAddPatientToQueueOK creates AddPatientToQueueOK with default headers values
func NewAddPatientToQueueOK() *AddPatientToQueueOK {

	return &AddPatientToQueueOK{}
}

// WriteResponse to the client
func (o *AddPatientToQueueOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// AddPatientToQueueInternalServerErrorCode is the HTTP code returned for type AddPatientToQueueInternalServerError
const AddPatientToQueueInternalServerErrorCode int = 500

/*AddPatientToQueueInternalServerError internal server error

swagger:response addPatientToQueueInternalServerError
*/
type AddPatientToQueueInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddPatientToQueueInternalServerError creates AddPatientToQueueInternalServerError with default headers values
func NewAddPatientToQueueInternalServerError() *AddPatientToQueueInternalServerError {

	return &AddPatientToQueueInternalServerError{}
}

// WithPayload adds the payload to the add patient to queue internal server error response
func (o *AddPatientToQueueInternalServerError) WithPayload(payload *models.Error) *AddPatientToQueueInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add patient to queue internal server error response
func (o *AddPatientToQueueInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddPatientToQueueInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
