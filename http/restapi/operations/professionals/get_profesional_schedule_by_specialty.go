// Code generated by go-swagger; DO NOT EDIT.

package professionals

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetProfesionalScheduleBySpecialtyHandlerFunc turns a function with the right signature into a get profesional schedule by specialty handler
type GetProfesionalScheduleBySpecialtyHandlerFunc func(GetProfesionalScheduleBySpecialtyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetProfesionalScheduleBySpecialtyHandlerFunc) Handle(params GetProfesionalScheduleBySpecialtyParams) middleware.Responder {
	return fn(params)
}

// GetProfesionalScheduleBySpecialtyHandler interface for that can handle valid get profesional schedule by specialty params
type GetProfesionalScheduleBySpecialtyHandler interface {
	Handle(GetProfesionalScheduleBySpecialtyParams) middleware.Responder
}

// NewGetProfesionalScheduleBySpecialty creates a new http.Handler for the get profesional schedule by specialty operation
func NewGetProfesionalScheduleBySpecialty(ctx *middleware.Context, handler GetProfesionalScheduleBySpecialtyHandler) *GetProfesionalScheduleBySpecialty {
	return &GetProfesionalScheduleBySpecialty{Context: ctx, Handler: handler}
}

/*GetProfesionalScheduleBySpecialty swagger:route GET /v1/professionals/{id}/specialties/{idSpecialty}/schedule professionals getProfesionalScheduleBySpecialty

GetProfesionalScheduleBySpecialty get profesional schedule by specialty API

*/
type GetProfesionalScheduleBySpecialty struct {
	Context *middleware.Context
	Handler GetProfesionalScheduleBySpecialtyHandler
}

func (o *GetProfesionalScheduleBySpecialty) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetProfesionalScheduleBySpecialtyParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
