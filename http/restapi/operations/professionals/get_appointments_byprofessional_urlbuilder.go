// Code generated by go-swagger; DO NOT EDIT.

package professionals

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"
	"strings"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetAppointmentsByprofessionalURL generates an URL for the get appointments byprofessional operation
type GetAppointmentsByprofessionalURL struct {
	ID int64

	FinishDate  *strfmt.DateTime
	Idspecialty *int64
	StartDate   *strfmt.DateTime
	Status      []string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetAppointmentsByprofessionalURL) WithBasePath(bp string) *GetAppointmentsByprofessionalURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetAppointmentsByprofessionalURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GetAppointmentsByprofessionalURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/v1/professionals/{id}/appointments"

	id := swag.FormatInt64(o.ID)
	if id != "" {
		_path = strings.Replace(_path, "{id}", id, -1)
	} else {
		return nil, errors.New("id is required on GetAppointmentsByprofessionalURL")
	}

	_basePath := o._basePath
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var finishDateQ string
	if o.FinishDate != nil {
		finishDateQ = o.FinishDate.String()
	}
	if finishDateQ != "" {
		qs.Set("finishDate", finishDateQ)
	}

	var idspecialtyQ string
	if o.Idspecialty != nil {
		idspecialtyQ = swag.FormatInt64(*o.Idspecialty)
	}
	if idspecialtyQ != "" {
		qs.Set("idspecialty", idspecialtyQ)
	}

	var startDateQ string
	if o.StartDate != nil {
		startDateQ = o.StartDate.String()
	}
	if startDateQ != "" {
		qs.Set("startDate", startDateQ)
	}

	var statusIR []string
	for _, statusI := range o.Status {
		statusIS := statusI
		if statusIS != "" {
			statusIR = append(statusIR, statusIS)
		}
	}

	status := swag.JoinByFormat(statusIR, "")

	if len(status) > 0 {
		qsv := status[0]
		if qsv != "" {
			qs.Set("status", qsv)
		}
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GetAppointmentsByprofessionalURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GetAppointmentsByprofessionalURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GetAppointmentsByprofessionalURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GetAppointmentsByprofessionalURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GetAppointmentsByprofessionalURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GetAppointmentsByprofessionalURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
