// Code generated by go-swagger; DO NOT EDIT.

package professionals

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/appointment/http/models"
)

// NewSetProfesionalScheduleBySpecialtyParams creates a new SetProfesionalScheduleBySpecialtyParams object
// no default values defined in spec.
func NewSetProfesionalScheduleBySpecialtyParams() SetProfesionalScheduleBySpecialtyParams {

	return SetProfesionalScheduleBySpecialtyParams{}
}

// SetProfesionalScheduleBySpecialtyParams contains all the bound params for the set profesional schedule by specialty operation
// typically these are obtained from a http.Request
//
// swagger:parameters setProfesionalScheduleBySpecialty
type SetProfesionalScheduleBySpecialtyParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*id professional
	  Required: true
	  In: path
	*/
	ID int64
	/*id specialty
	  Required: true
	  In: path
	*/
	IDSpecialty int64
	/*
	  In: body
	*/
	Schedule *models.Schedule
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewSetProfesionalScheduleBySpecialtyParams() beforehand.
func (o *SetProfesionalScheduleBySpecialtyParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	rIDSpecialty, rhkIDSpecialty, _ := route.Params.GetOK("idSpecialty")
	if err := o.bindIDSpecialty(rIDSpecialty, rhkIDSpecialty, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.Schedule
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			res = append(res, errors.NewParseError("schedule", "body", "", err))
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Schedule = &body
			}
		}
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindID binds and validates parameter ID from path.
func (o *SetProfesionalScheduleBySpecialtyParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("id", "path", "int64", raw)
	}
	o.ID = value

	return nil
}

// bindIDSpecialty binds and validates parameter IDSpecialty from path.
func (o *SetProfesionalScheduleBySpecialtyParams) bindIDSpecialty(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("idSpecialty", "path", "int64", raw)
	}
	o.IDSpecialty = value

	return nil
}
