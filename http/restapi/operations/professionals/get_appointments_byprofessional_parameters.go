// Code generated by go-swagger; DO NOT EDIT.

package professionals

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAppointmentsByprofessionalParams creates a new GetAppointmentsByprofessionalParams object
// with the default values initialized.
func NewGetAppointmentsByprofessionalParams() GetAppointmentsByprofessionalParams {

	var (
		// initialize parameters with default values

		statusDefault = string("avaiable")
	)

	return GetAppointmentsByprofessionalParams{
		Status: &statusDefault,
	}
}

// GetAppointmentsByprofessionalParams contains all the bound params for the get appointments byprofessional operation
// typically these are obtained from a http.Request
//
// swagger:parameters getAppointmentsByprofessional
type GetAppointmentsByprofessionalParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*id professional
	  Required: true
	  In: path
	*/
	ID int64
	/*
	  In: query
	  Default: "avaiable"
	*/
	Status *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetAppointmentsByprofessionalParams() beforehand.
func (o *GetAppointmentsByprofessionalParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	qStatus, qhkStatus, _ := qs.GetOK("status")
	if err := o.bindStatus(qStatus, qhkStatus, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindID binds and validates parameter ID from path.
func (o *GetAppointmentsByprofessionalParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("id", "path", "int64", raw)
	}
	o.ID = value

	return nil
}

// bindStatus binds and validates parameter Status from query.
func (o *GetAppointmentsByprofessionalParams) bindStatus(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetAppointmentsByprofessionalParams()
		return nil
	}

	o.Status = &raw

	if err := o.validateStatus(formats); err != nil {
		return err
	}

	return nil
}

// validateStatus carries on validations for parameter Status
func (o *GetAppointmentsByprofessionalParams) validateStatus(formats strfmt.Registry) error {

	if err := validate.Enum("status", "query", *o.Status, []interface{}{"confirmed", "cancelled", "pending", "avaiable"}); err != nil {
		return err
	}

	return nil
}
