// Code generated by go-swagger; DO NOT EDIT.

package professionals

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// SetProfesionalScheduleBySpecialtyHandlerFunc turns a function with the right signature into a set profesional schedule by specialty handler
type SetProfesionalScheduleBySpecialtyHandlerFunc func(SetProfesionalScheduleBySpecialtyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SetProfesionalScheduleBySpecialtyHandlerFunc) Handle(params SetProfesionalScheduleBySpecialtyParams) middleware.Responder {
	return fn(params)
}

// SetProfesionalScheduleBySpecialtyHandler interface for that can handle valid set profesional schedule by specialty params
type SetProfesionalScheduleBySpecialtyHandler interface {
	Handle(SetProfesionalScheduleBySpecialtyParams) middleware.Responder
}

// NewSetProfesionalScheduleBySpecialty creates a new http.Handler for the set profesional schedule by specialty operation
func NewSetProfesionalScheduleBySpecialty(ctx *middleware.Context, handler SetProfesionalScheduleBySpecialtyHandler) *SetProfesionalScheduleBySpecialty {
	return &SetProfesionalScheduleBySpecialty{Context: ctx, Handler: handler}
}

/*SetProfesionalScheduleBySpecialty swagger:route POST /v1/professionals/{id}/specialties/{idSpecialty}/schedule professionals setProfesionalScheduleBySpecialty

SetProfesionalScheduleBySpecialty set profesional schedule by specialty API

*/
type SetProfesionalScheduleBySpecialty struct {
	Context *middleware.Context
	Handler SetProfesionalScheduleBySpecialtyHandler
}

func (o *SetProfesionalScheduleBySpecialty) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSetProfesionalScheduleBySpecialtyParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
