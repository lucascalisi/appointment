// Code generated by go-swagger; DO NOT EDIT.

package appointments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSearchAppointmentParams creates a new SearchAppointmentParams object
// with the default values initialized.
func NewSearchAppointmentParams() SearchAppointmentParams {

	var (
		// initialize parameters with default values

		finishDateDefault     = strfmt.DateTime{}
		iDPatientDefault      = int64(0)
		iDProfessionalDefault = int64(0)
		idspecialtyDefault    = int64(0)
		startDateDefault      = strfmt.DateTime{}
		statusDefault         = string("avaiable")
	)

	finishDateDefault.UnmarshalText([]byte("2040-01-01T00:00:00Z"))

	startDateDefault.UnmarshalText([]byte("2000-01-01T00:00:00Z"))

	return SearchAppointmentParams{
		FinishDate: &finishDateDefault,

		IDPatient: &iDPatientDefault,

		IDProfessional: &iDProfessionalDefault,

		Idspecialty: &idspecialtyDefault,

		StartDate: &startDateDefault,

		Status: &statusDefault,
	}
}

// SearchAppointmentParams contains all the bound params for the search appointment operation
// typically these are obtained from a http.Request
//
// swagger:parameters searchAppointment
type SearchAppointmentParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*finish date for appointment
	  In: query
	  Default: "2040-01-01T00:00:00Z"
	*/
	FinishDate *strfmt.DateTime
	/*id of the patient
	  In: query
	  Default: 0
	*/
	IDPatient *int64
	/*id of the professional
	  In: query
	  Default: 0
	*/
	IDProfessional *int64
	/*id for specialty
	  In: query
	  Default: 0
	*/
	Idspecialty *int64
	/*start date for appointment
	  In: query
	  Default: "2000-01-01T00:00:00Z"
	*/
	StartDate *strfmt.DateTime
	/*appointment status
	  In: query
	  Default: "avaiable"
	*/
	Status *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewSearchAppointmentParams() beforehand.
func (o *SearchAppointmentParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qFinishDate, qhkFinishDate, _ := qs.GetOK("finishDate")
	if err := o.bindFinishDate(qFinishDate, qhkFinishDate, route.Formats); err != nil {
		res = append(res, err)
	}

	qIDPatient, qhkIDPatient, _ := qs.GetOK("idPatient")
	if err := o.bindIDPatient(qIDPatient, qhkIDPatient, route.Formats); err != nil {
		res = append(res, err)
	}

	qIDProfessional, qhkIDProfessional, _ := qs.GetOK("idProfessional")
	if err := o.bindIDProfessional(qIDProfessional, qhkIDProfessional, route.Formats); err != nil {
		res = append(res, err)
	}

	qIdspecialty, qhkIdspecialty, _ := qs.GetOK("idspecialty")
	if err := o.bindIdspecialty(qIdspecialty, qhkIdspecialty, route.Formats); err != nil {
		res = append(res, err)
	}

	qStartDate, qhkStartDate, _ := qs.GetOK("startDate")
	if err := o.bindStartDate(qStartDate, qhkStartDate, route.Formats); err != nil {
		res = append(res, err)
	}

	qStatus, qhkStatus, _ := qs.GetOK("status")
	if err := o.bindStatus(qStatus, qhkStatus, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindFinishDate binds and validates parameter FinishDate from query.
func (o *SearchAppointmentParams) bindFinishDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewSearchAppointmentParams()
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("finishDate", "query", "strfmt.DateTime", raw)
	}
	o.FinishDate = (value.(*strfmt.DateTime))

	if err := o.validateFinishDate(formats); err != nil {
		return err
	}

	return nil
}

// validateFinishDate carries on validations for parameter FinishDate
func (o *SearchAppointmentParams) validateFinishDate(formats strfmt.Registry) error {

	if err := validate.FormatOf("finishDate", "query", "date-time", o.FinishDate.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindIDPatient binds and validates parameter IDPatient from query.
func (o *SearchAppointmentParams) bindIDPatient(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewSearchAppointmentParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("idPatient", "query", "int64", raw)
	}
	o.IDPatient = &value

	return nil
}

// bindIDProfessional binds and validates parameter IDProfessional from query.
func (o *SearchAppointmentParams) bindIDProfessional(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewSearchAppointmentParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("idProfessional", "query", "int64", raw)
	}
	o.IDProfessional = &value

	return nil
}

// bindIdspecialty binds and validates parameter Idspecialty from query.
func (o *SearchAppointmentParams) bindIdspecialty(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewSearchAppointmentParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("idspecialty", "query", "int64", raw)
	}
	o.Idspecialty = &value

	return nil
}

// bindStartDate binds and validates parameter StartDate from query.
func (o *SearchAppointmentParams) bindStartDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewSearchAppointmentParams()
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("startDate", "query", "strfmt.DateTime", raw)
	}
	o.StartDate = (value.(*strfmt.DateTime))

	if err := o.validateStartDate(formats); err != nil {
		return err
	}

	return nil
}

// validateStartDate carries on validations for parameter StartDate
func (o *SearchAppointmentParams) validateStartDate(formats strfmt.Registry) error {

	if err := validate.FormatOf("startDate", "query", "date-time", o.StartDate.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindStatus binds and validates parameter Status from query.
func (o *SearchAppointmentParams) bindStatus(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewSearchAppointmentParams()
		return nil
	}

	o.Status = &raw

	if err := o.validateStatus(formats); err != nil {
		return err
	}

	return nil
}

// validateStatus carries on validations for parameter Status
func (o *SearchAppointmentParams) validateStatus(formats strfmt.Registry) error {

	if err := validate.Enum("status", "query", *o.Status, []interface{}{"confirmed", "cancelled", "pending", "avaiable"}); err != nil {
		return err
	}

	return nil
}
