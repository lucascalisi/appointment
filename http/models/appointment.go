// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Appointment appointment
// swagger:model appointment
type Appointment struct {

	// date
	// Required: true
	// Format: date-time
	Date *strfmt.DateTime `json:"date"`

	// id
	ID int64 `json:"id,omitempty"`

	// patient
	Patient *Patient `json:"patient,omitempty"`

	// professional
	Professional *Professional `json:"professional,omitempty"`

	// status
	// Required: true
	Status AppointmentStatus `json:"status"`
}

// Validate validates this appointment
func (m *Appointment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePatient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfessional(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Appointment) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", m.Date); err != nil {
		return err
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Appointment) validatePatient(formats strfmt.Registry) error {

	if swag.IsZero(m.Patient) { // not required
		return nil
	}

	if m.Patient != nil {
		if err := m.Patient.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patient")
			}
			return err
		}
	}

	return nil
}

func (m *Appointment) validateProfessional(formats strfmt.Registry) error {

	if swag.IsZero(m.Professional) { // not required
		return nil
	}

	if m.Professional != nil {
		if err := m.Professional.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("professional")
			}
			return err
		}
	}

	return nil
}

func (m *Appointment) validateStatus(formats strfmt.Registry) error {

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Appointment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Appointment) UnmarshalBinary(b []byte) error {
	var res Appointment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
