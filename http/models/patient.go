// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Patient patient
// swagger:model patient
type Patient struct {

	// birth day
	// Required: true
	// Format: date
	BirthDay *strfmt.Date `json:"birthDay"`

	// dni
	// Required: true
	Dni *int64 `json:"dni"`

	// id
	ID int64 `json:"id,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// payment status
	PaymentStatus bool `json:"paymentStatus,omitempty"`

	// sex
	// Required: true
	// Enum: [masculino femenino]
	Sex *string `json:"sex"`
}

// Validate validates this patient
func (m *Patient) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBirthDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDni(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSex(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Patient) validateBirthDay(formats strfmt.Registry) error {

	if err := validate.Required("birthDay", "body", m.BirthDay); err != nil {
		return err
	}

	if err := validate.FormatOf("birthDay", "body", "date", m.BirthDay.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Patient) validateDni(formats strfmt.Registry) error {

	if err := validate.Required("dni", "body", m.Dni); err != nil {
		return err
	}

	return nil
}

func (m *Patient) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var patientTypeSexPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["masculino","femenino"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patientTypeSexPropEnum = append(patientTypeSexPropEnum, v)
	}
}

const (

	// PatientSexMasculino captures enum value "masculino"
	PatientSexMasculino string = "masculino"

	// PatientSexFemenino captures enum value "femenino"
	PatientSexFemenino string = "femenino"
)

// prop value enum
func (m *Patient) validateSexEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, patientTypeSexPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Patient) validateSex(formats strfmt.Registry) error {

	if err := validate.Required("sex", "body", m.Sex); err != nil {
		return err
	}

	// value enum
	if err := m.validateSexEnum("sex", "body", *m.Sex); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Patient) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Patient) UnmarshalBinary(b []byte) error {
	var res Patient
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
