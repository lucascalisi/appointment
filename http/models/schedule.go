// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Schedule schedule
// swagger:model schedule
type Schedule struct {

	// id
	ID int64 `json:"id,omitempty"`

	// month
	// Required: true
	Month *int64 `json:"month"`

	// schedule
	// Required: true
	Schedule []*ScheduleItems0 `json:"schedule"`

	// year
	// Required: true
	Year *int64 `json:"year"`
}

// Validate validates this schedule
func (m *Schedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Schedule) validateMonth(formats strfmt.Registry) error {

	if err := validate.Required("month", "body", m.Month); err != nil {
		return err
	}

	return nil
}

func (m *Schedule) validateSchedule(formats strfmt.Registry) error {

	if err := validate.Required("schedule", "body", m.Schedule); err != nil {
		return err
	}

	for i := 0; i < len(m.Schedule); i++ {
		if swag.IsZero(m.Schedule[i]) { // not required
			continue
		}

		if m.Schedule[i] != nil {
			if err := m.Schedule[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("schedule" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Schedule) validateYear(formats strfmt.Registry) error {

	if err := validate.Required("year", "body", m.Year); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Schedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Schedule) UnmarshalBinary(b []byte) error {
	var res Schedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ScheduleItems0 schedule items0
// swagger:model ScheduleItems0
type ScheduleItems0 struct {

	// day
	Day int64 `json:"day,omitempty"`

	// finish time
	// Pattern: ^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$
	FinishTime string `json:"finishTime,omitempty"`

	// start time
	// Pattern: ^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$
	StartTime string `json:"startTime,omitempty"`
}

// Validate validates this schedule items0
func (m *ScheduleItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFinishTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleItems0) validateFinishTime(formats strfmt.Registry) error {

	if swag.IsZero(m.FinishTime) { // not required
		return nil
	}

	if err := validate.Pattern("finishTime", "body", string(m.FinishTime), `^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleItems0) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.Pattern("startTime", "body", string(m.StartTime), `^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScheduleItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduleItems0) UnmarshalBinary(b []byte) error {
	var res ScheduleItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
